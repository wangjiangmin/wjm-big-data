/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package springbootKStreamAvro.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class UserLogs extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6395356362400044195L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserLogs\",\"namespace\":\"springbootKafkaAvro.avro\",\"fields\":[{\"name\":\"userID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"ip\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"sysName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"deviceType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},{\"name\":\"uuid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserLogs> ENCODER =
      new BinaryMessageEncoder<UserLogs>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserLogs> DECODER =
      new BinaryMessageDecoder<UserLogs>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserLogs> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserLogs> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserLogs> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserLogs>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserLogs to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserLogs from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserLogs instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserLogs fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public String userID;
  @Deprecated public String ip;
  @Deprecated public String sysName;
  @Deprecated public String url;
  @Deprecated public String date;
  @Deprecated public String deviceType;
  @Deprecated public String uuid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserLogs() {}

  /**
   * All-args constructor.
   * @param userID The new value for userID
   * @param ip The new value for ip
   * @param sysName The new value for sysName
   * @param url The new value for url
   * @param date The new value for date
   * @param deviceType The new value for deviceType
   * @param uuid The new value for uuid
   */
  public UserLogs(String userID, String ip, String sysName, String url, String date, String deviceType, String uuid) {
    this.userID = userID;
    this.ip = ip;
    this.sysName = sysName;
    this.url = url;
    this.date = date;
    this.deviceType = deviceType;
    this.uuid = uuid;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return userID;
    case 1: return ip;
    case 2: return sysName;
    case 3: return url;
    case 4: return date;
    case 5: return deviceType;
    case 6: return uuid;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: userID = (String)value$; break;
    case 1: ip = (String)value$; break;
    case 2: sysName = (String)value$; break;
    case 3: url = (String)value$; break;
    case 4: date = (String)value$; break;
    case 5: deviceType = (String)value$; break;
    case 6: uuid = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userID' field.
   * @return The value of the 'userID' field.
   */
  public String getUserID() {
    return userID;
  }


  /**
   * Sets the value of the 'userID' field.
   * @param value the value to set.
   */
  public void setUserID(String value) {
    this.userID = value;
  }

  /**
   * Gets the value of the 'ip' field.
   * @return The value of the 'ip' field.
   */
  public String getIp() {
    return ip;
  }


  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(String value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'sysName' field.
   * @return The value of the 'sysName' field.
   */
  public String getSysName() {
    return sysName;
  }


  /**
   * Sets the value of the 'sysName' field.
   * @param value the value to set.
   */
  public void setSysName(String value) {
    this.sysName = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public String getUrl() {
    return url;
  }


  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(String value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public String getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(String value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'deviceType' field.
   * @return The value of the 'deviceType' field.
   */
  public String getDeviceType() {
    return deviceType;
  }


  /**
   * Sets the value of the 'deviceType' field.
   * @param value the value to set.
   */
  public void setDeviceType(String value) {
    this.deviceType = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public String getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(String value) {
    this.uuid = value;
  }

  /**
   * Creates a new UserLogs RecordBuilder.
   * @return A new UserLogs RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new UserLogs RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserLogs RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new UserLogs RecordBuilder by copying an existing UserLogs instance.
   * @param other The existing instance to copy.
   * @return A new UserLogs RecordBuilder
   */
  public static Builder newBuilder(UserLogs other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for UserLogs instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserLogs>
    implements org.apache.avro.data.RecordBuilder<UserLogs> {

    private String userID;
    private String ip;
    private String sysName;
    private String url;
    private String date;
    private String deviceType;
    private String uuid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userID)) {
        this.userID = data().deepCopy(fields()[0].schema(), other.userID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ip)) {
        this.ip = data().deepCopy(fields()[1].schema(), other.ip);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sysName)) {
        this.sysName = data().deepCopy(fields()[2].schema(), other.sysName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.url)) {
        this.url = data().deepCopy(fields()[3].schema(), other.url);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.date)) {
        this.date = data().deepCopy(fields()[4].schema(), other.date);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.deviceType)) {
        this.deviceType = data().deepCopy(fields()[5].schema(), other.deviceType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.uuid)) {
        this.uuid = data().deepCopy(fields()[6].schema(), other.uuid);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing UserLogs instance
     * @param other The existing instance to copy.
     */
    private Builder(UserLogs other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.userID)) {
        this.userID = data().deepCopy(fields()[0].schema(), other.userID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ip)) {
        this.ip = data().deepCopy(fields()[1].schema(), other.ip);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sysName)) {
        this.sysName = data().deepCopy(fields()[2].schema(), other.sysName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.url)) {
        this.url = data().deepCopy(fields()[3].schema(), other.url);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.date)) {
        this.date = data().deepCopy(fields()[4].schema(), other.date);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.deviceType)) {
        this.deviceType = data().deepCopy(fields()[5].schema(), other.deviceType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.uuid)) {
        this.uuid = data().deepCopy(fields()[6].schema(), other.uuid);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'userID' field.
      * @return The value.
      */
    public String getUserID() {
      return userID;
    }


    /**
      * Sets the value of the 'userID' field.
      * @param value The value of 'userID'.
      * @return This builder.
      */
    public Builder setUserID(String value) {
      validate(fields()[0], value);
      this.userID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userID' field has been set.
      * @return True if the 'userID' field has been set, false otherwise.
      */
    public boolean hasUserID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userID' field.
      * @return This builder.
      */
    public Builder clearUserID() {
      userID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ip' field.
      * @return The value.
      */
    public String getIp() {
      return ip;
    }


    /**
      * Sets the value of the 'ip' field.
      * @param value The value of 'ip'.
      * @return This builder.
      */
    public Builder setIp(String value) {
      validate(fields()[1], value);
      this.ip = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ip' field has been set.
      * @return True if the 'ip' field has been set, false otherwise.
      */
    public boolean hasIp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ip' field.
      * @return This builder.
      */
    public Builder clearIp() {
      ip = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sysName' field.
      * @return The value.
      */
    public String getSysName() {
      return sysName;
    }


    /**
      * Sets the value of the 'sysName' field.
      * @param value The value of 'sysName'.
      * @return This builder.
      */
    public Builder setSysName(String value) {
      validate(fields()[2], value);
      this.sysName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sysName' field has been set.
      * @return True if the 'sysName' field has been set, false otherwise.
      */
    public boolean hasSysName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sysName' field.
      * @return This builder.
      */
    public Builder clearSysName() {
      sysName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public String getUrl() {
      return url;
    }


    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public Builder setUrl(String value) {
      validate(fields()[3], value);
      this.url = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public Builder clearUrl() {
      url = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public String getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public Builder setDate(String value) {
      validate(fields()[4], value);
      this.date = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public Builder clearDate() {
      date = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceType' field.
      * @return The value.
      */
    public String getDeviceType() {
      return deviceType;
    }


    /**
      * Sets the value of the 'deviceType' field.
      * @param value The value of 'deviceType'.
      * @return This builder.
      */
    public Builder setDeviceType(String value) {
      validate(fields()[5], value);
      this.deviceType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceType' field has been set.
      * @return True if the 'deviceType' field has been set, false otherwise.
      */
    public boolean hasDeviceType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'deviceType' field.
      * @return This builder.
      */
    public Builder clearDeviceType() {
      deviceType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public String getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public Builder setUuid(String value) {
      validate(fields()[6], value);
      this.uuid = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserLogs build() {
      try {
        UserLogs record = new UserLogs();
        record.userID = fieldSetFlags()[0] ? this.userID : (String) defaultValue(fields()[0]);
        record.ip = fieldSetFlags()[1] ? this.ip : (String) defaultValue(fields()[1]);
        record.sysName = fieldSetFlags()[2] ? this.sysName : (String) defaultValue(fields()[2]);
        record.url = fieldSetFlags()[3] ? this.url : (String) defaultValue(fields()[3]);
        record.date = fieldSetFlags()[4] ? this.date : (String) defaultValue(fields()[4]);
        record.deviceType = fieldSetFlags()[5] ? this.deviceType : (String) defaultValue(fields()[5]);
        record.uuid = fieldSetFlags()[6] ? this.uuid : (String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserLogs>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserLogs>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserLogs>
    READER$ = (org.apache.avro.io.DatumReader<UserLogs>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.userID);

    out.writeString(this.ip);

    out.writeString(this.sysName);

    out.writeString(this.url);

    out.writeString(this.date);

    out.writeString(this.deviceType);

    out.writeString(this.uuid);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.userID = in.readString();

      this.ip = in.readString();

      this.sysName = in.readString();

      this.url = in.readString();

      this.date = in.readString();

      this.deviceType = in.readString();

      this.uuid = in.readString();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.userID = in.readString();
          break;

        case 1:
          this.ip = in.readString();
          break;

        case 2:
          this.sysName = in.readString();
          break;

        case 3:
          this.url = in.readString();
          break;

        case 4:
          this.date = in.readString();
          break;

        case 5:
          this.deviceType = in.readString();
          break;

        case 6:
          this.uuid = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










